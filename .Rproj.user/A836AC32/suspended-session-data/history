# return data frames
return(list(dateAndScore, nrsAnalysisDataFrame))
}
## Scrape for Wallace ##
Wallace <- function() {
# function to scrape for poem and it's date using poem names
GetPoemAndDate <- function(poemName) {
nameVec <- unlist(str_split(poemName, pattern = " "))
url <- str_c("http://www.poetry-archive.com/s/",
paste(nameVec, collapse = "_"),
".html")
poem <- url %>%
read_html() %>%
html_nodes("dl") %>%
html_text() %>%
str_replace_all(pattern = "\r", replacement = "") %>%
str_replace_all(pattern = "\n", replacement = " ") %>%
str_replace_all(pattern = "[  ]{2}", replacement = "")
date <- url %>%
read_html() %>%
html_nodes("td font") %>%
html_text()
date <- date[3] %>%
str_extract(pattern = "[0-9]+")
# pause before function return
Sys.sleep(runif(1,0,1))
return(list(poem = poem, date = date))
}
# function to analyse poems and return scores
AnalysePoems <- function(i) {
poem <- data_frame(poem = poemDataFrame$poem[i])
textTokenized <- poem %>%
unnest_tokens(word, poem)
data("stop_words")
tidyPoem <- textTokenized %>%
anti_join(stop_words)
bing <- sentiments %>%
filter(lexicon == "bing") %>%
select(-score)
poemSentiment <- tidyPoem %>%
inner_join(bing)
poemSentiment <- poemSentiment %>%
mutate(score = ifelse(poemSentiment$sentiment == "positive", 1, -1))
finalScore <- (sum(poemSentiment$score)/length(textTokenized$word))*10
return(finalScore)
}
# nrs analysis function
nrcAnalysePoems <- function(sent) {
textTokenized <- nrsPoem %>%
unnest_tokens(word, poem)
data("stop_words")
tidyPoem <- textTokenized %>%
anti_join(stop_words)
nrcSentiment <- sentiments %>%
filter(lexicon == "nrc", sentiment == sent)
sentimentInPoem <- tidyPoem %>%
semi_join(nrcSentiment) %>%
count(word, sort = TRUE)
return(sum(sentimentInPoem$n))
}
# page url
poemNameUrl <- "http://www.poetry-archive.com/s/stevens_wallace.html"
# scrape for poem names
poemName <- poemNameUrl %>%
read_html() %>%
html_nodes("a font") %>%
html_text()
poemName <- poemName[1:(length(poemName) - 2)] %>%
str_replace_all(pattern = "\r", replacement = "") %>%
str_replace_all(pattern = "\n", replacement = " ") %>%
str_replace_all(pattern = "[  ]{2}", replacement = "") %>%
str_replace_all(pattern = "[[:punct:]]", replacement = "") %>%
tolower()
# hardcode poem name to fit in with used url name
poemName[1] <- "the_emperor_of_ice_cream"
poemName[2] <- "a_high_toned_old_christian_woman"
# poemName[20] <- "the_wood-pile"
# get poems and dates
poemDataFrame <- list()
count <- 1
for (name in poemName) {
poemDataFrame[[count]] <- data.frame(poem = GetPoemAndDate(name)$poem,
date = GetPoemAndDate(name)$date,
stringsAsFactors = FALSE)
count <- count + 1
}
# rbind all poems and dates
poemDataFrame <- do.call(rbind, poemDataFrame)
poemDataFrame$date[3] <- "1921"
# create data frame of names, poems and dates
poemDataFrame <- cbind(poemName, poemDataFrame)
# get scores
scores <- sapply(1:length(poemDataFrame$poem), AnalysePoems)
dateAndScore <- data.frame(scores) %>%
mutate(date = year(ymd(str_c(poemDataFrame$date, "/01/01"))))
# do nrs analysis
sentimentsVec <- c("anger", "anticipation", "disgust", "fear",
"joy","sadness", "surprise", "trust")
nrsAnalysisDataFrame <- list()
for (i in 1:length(poemDataFrame$poem)) {
nrsPoem <- data_frame(poem = poemDataFrame$poem[i])
nrsDataFrame <- as.data.frame(sapply(sentimentsVec, nrcAnalysePoems)) %>%
rownames_to_column() %>%
select(sentiment = rowname, value = 2) %>%
mutate(name = poemDataFrame$poemName[i],
date = poemDataFrame$date[i])
nrsAnalysisDataFrame[[i]] <- nrsDataFrame
}
# rbind all nrs analysis
nrsAnalysisDataFrame <- do.call(rbind, nrsAnalysisDataFrame)
# return data frames
return(list(dateAndScore, nrsAnalysisDataFrame))
}
## Scrape for Cummings ##
Cummings <- function() {
# function to scrape for poem and it's date using poem names
GetPoemAndDate <- function(poemName) {
nameVec <- unlist(str_split(poemName, pattern = " "))
url <- str_c("http://www.poetry-archive.com/c/",
paste(nameVec, collapse = "_"),
".html")
poem <- url %>%
read_html() %>%
html_nodes("dl") %>%
html_text() %>%
str_replace_all(pattern = "\r", replacement = "") %>%
str_replace_all(pattern = "\n", replacement = " ") %>%
str_replace_all(pattern = "[  ]{2}", replacement = "")
date <- url %>%
read_html() %>%
html_nodes("td font") %>%
html_text()
date <- date[4] %>%
str_extract(pattern = "[0-9]{4}")
# pause before function return
Sys.sleep(runif(1,0,1))
return(list(poem = poem, date = date))
}
# function to analyse poems and return scores
AnalysePoems <- function(i) {
poem <- data_frame(poem = poemDataFrame$poem[i])
textTokenized <- poem %>%
unnest_tokens(word, poem)
data("stop_words")
tidyPoem <- textTokenized %>%
anti_join(stop_words)
bing <- sentiments %>%
filter(lexicon == "bing") %>%
select(-score)
poemSentiment <- tidyPoem %>%
inner_join(bing)
poemSentiment <- poemSentiment %>%
mutate(score = ifelse(poemSentiment$sentiment == "positive", 1, -1))
finalScore <- (sum(poemSentiment$score)/length(textTokenized$word))*10
return(finalScore)
}
# nrs analysis function
nrcAnalysePoems <- function(sent) {
textTokenized <- nrsPoem %>%
unnest_tokens(word, poem)
data("stop_words")
tidyPoem <- textTokenized %>%
anti_join(stop_words)
nrcSentiment <- sentiments %>%
filter(lexicon == "nrc", sentiment == sent)
sentimentInPoem <- tidyPoem %>%
semi_join(nrcSentiment) %>%
count(word, sort = TRUE)
return(sum(sentimentInPoem$n))
}
# page url
poemNameUrl <- "http://www.poetry-archive.com/c/cummings_e_e.html"
# scrape for poem names
poemName <- poemNameUrl %>%
read_html() %>%
html_nodes("a font") %>%
html_text()
poemName <- poemName[1:(length(poemName) - 2)] %>%
str_replace_all(pattern = "\r", replacement = "") %>%
str_replace_all(pattern = "\n", replacement = " ") %>%
str_replace_all(pattern = "[  ]{2}", replacement = "") %>%
str_replace_all(pattern = "[[:punct:]]", replacement = "") %>%
tolower()
# get poems and dates
poemDataFrame <- list()
count <- 1
for (name in poemName) {
poemDataFrame[[count]] <- data.frame(poem = GetPoemAndDate(name)$poem,
date = GetPoemAndDate(name)$date,
stringsAsFactors = FALSE)
count <- count + 1
}
# rbind all poems and dates
poemDataFrame <- do.call(rbind, poemDataFrame)
# create data frame of names, poems and dates
poemDataFrame <- cbind(poemName, poemDataFrame)
# get scores
scores <- sapply(1:length(poemDataFrame$poem), AnalysePoems)
dateAndScore <- data.frame(scores) %>%
mutate(date = year(ymd(str_c(poemDataFrame$date, "/01/01"))))
# do nrs analysis
sentimentsVec <- c("anger", "anticipation", "disgust", "fear",
"joy","sadness", "surprise", "trust")
nrsAnalysisDataFrame <- data.frame()
for (i in 1:length(poemDataFrame$poem)) {
nrsPoem <- data_frame(poem = poemDataFrame$poem[i])
nrsDataFrame <- as.data.frame(sapply(sentimentsVec, nrcAnalysePoems)) %>%
rownames_to_column() %>%
select(sentiment = rowname, value = 2) %>%
mutate(name = poemDataFrame$poemName[i],
date = poemDataFrame$date[i])
nrsAnalysisDataFrame <- rbind(nrsAnalysisDataFrame, nrsDataFrame)
}
# return data frames
return(list(dateAndScore, nrsAnalysisDataFrame))
}
## Scrape for Lawrence ##
Lawrence <- function() {
# function to scrape for poem and it's date using poem names
GetPoemAndDate <- function(poemName) {
nameVec <- unlist(str_split(poemName, pattern = " "))
url <- str_c("http://www.poetry-archive.com/l/",
paste(nameVec, collapse = "_"),
".html")
poem <- url %>%
read_html() %>%
html_nodes("dl") %>%
html_text() %>%
str_replace_all(pattern = "\r", replacement = "") %>%
str_replace_all(pattern = "\n", replacement = " ") %>%
str_replace_all(pattern = "[  ]{2}", replacement = "")
date <- url %>%
read_html() %>%
html_nodes("td font") %>%
html_text()
date <- date[4] %>%
str_extract(pattern = "[0-9]{4}")
# pause before function return
Sys.sleep(runif(1,0,1))
return(list(poem = poem, date = date))
}
# function to analyse poems and return scores
AnalysePoems <- function(i) {
poem <- data_frame(poem = poemDataFrame$poem[i])
textTokenized <- poem %>%
unnest_tokens(word, poem)
data("stop_words")
tidyPoem <- textTokenized %>%
anti_join(stop_words)
bing <- sentiments %>%
filter(lexicon == "bing") %>%
select(-score)
poemSentiment <- tidyPoem %>%
inner_join(bing)
poemSentiment <- poemSentiment %>%
mutate(score = ifelse(poemSentiment$sentiment == "positive", 1, -1))
finalScore <- (sum(poemSentiment$score)/length(textTokenized$word))*10
return(finalScore)
}
# nrs analysis function
nrcAnalysePoems <- function(sent) {
textTokenized <- nrsPoem %>%
unnest_tokens(word, poem)
data("stop_words")
tidyPoem <- textTokenized %>%
anti_join(stop_words)
nrcSentiment <- sentiments %>%
filter(lexicon == "nrc", sentiment == sent)
sentimentInPoem <- tidyPoem %>%
semi_join(nrcSentiment) %>%
count(word, sort = TRUE)
return(sum(sentimentInPoem$n))
}
# page url
poemNameUrl <- "http://www.poetry-archive.com/l/lawrence_d_h.html"
# scrape for poem names
poemName <- poemNameUrl %>%
read_html() %>%
html_nodes("a font") %>%
html_text()
poemName <- poemName[1:(length(poemName) - 2)] %>%
str_replace_all(pattern = "\r", replacement = "") %>%
str_replace_all(pattern = "\n", replacement = " ") %>%
str_replace_all(pattern = "[  ]{2}", replacement = "") %>%
str_replace_all(pattern = "[[:punct:]]", replacement = "") %>%
tolower()
# get poems and dates
poemDataFrame <- list()
count <- 1
for (name in poemName) {
poemDataFrame[[count]] <- data.frame(poem = GetPoemAndDate(name)$poem,
date = GetPoemAndDate(name)$date,
stringsAsFactors = FALSE)
count <- count + 1
}
# rbind all poems and dates
poemDataFrame <- do.call(rbind, poemDataFrame)
# hardcode single date with error
poemDataFrame$date[3] <- 1916
# create data frame of names, poems and dates
poemDataFrame <- cbind(poemName, poemDataFrame)
# get scores
scores <- sapply(1:length(poemDataFrame$poem), AnalysePoems)
dateAndScore <- data.frame(scores) %>%
mutate(date = year(ymd(str_c(poemDataFrame$date, "/01/01"))))
# do nrs analysis
sentimentsVec <- c("anger", "anticipation", "disgust", "fear",
"joy","sadness", "surprise", "trust")
nrsAnalysisDataFrame <- list()
for (i in 1:length(poemDataFrame$poem)) {
nrsPoem <- data_frame(poem = poemDataFrame$poem[i])
nrsDataFrame <- as.data.frame(sapply(sentimentsVec, nrcAnalysePoems)) %>%
rownames_to_column() %>%
select(sentiment = rowname, value = 2) %>%
mutate(name = poemDataFrame$poemName[i],
date = poemDataFrame$date[i])
nrsAnalysisDataFrame[[i]] <- nrsDataFrame
}
# rbind all nrs analysis
nrsAnalysisDataFrame <- do.call(rbind, nrsAnalysisDataFrame)
# return data frames
return(list(dateAndScore, nrsAnalysisDataFrame))
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
yeats <- Yeats()
eliot <- Eliot()
frost <- Frost()
wallace <- Wallace()
cummings <- Cummings()
lawrence <- Lawrence()
# rbind data frames and summarize
completedataFramebing <- rbind(yeats[[1]],
eliot[[1]],
frost[[1]],
wallace[[1]],
cummings[[1]],
lawrence[[1]]) %>%
filter(!(date %in% c("1888", "1889"))) %>%
group_by(date)  %>%
summarize(score = mean(scores))
# display
head(completedataFramebing, 10)
# plot bar plot
p1 <- ggplot(data = completedataFramebing) +
geom_bar(aes(x = date, y = score, fill = score),
stat = "identity", position = "identity") +
ylim(-1, 1) +
ylab("mean percentage score") +
xlab("year") +
theme(legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 7),
legend.position = c(0.87, 0.77)) +
ggtitle("Bar Plot of Percetage Scores") +
theme(plot.title = element_text(lineheight = 0.4))
# plot dot and line plot
p2 <- ggplot(data = completedataFramebing) +
geom_line(aes(x = date, y = score), colour = "blue") +
geom_point(aes(x = date, y = score), size = 1.3, colour = "blue") +
ylim(-1, 1) +
ylab("mean percentage score") +
xlab("year") +
ggtitle("Dot and Line Plot of Percentage Scores") +
theme(plot.title = element_text(lineheight = 0.4))
# use multiplot function
# can be found at http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
multiplot(p1, p2, cols = 2)
p1 <- ggplot(data = completedataFramebing) +
geom_bar(aes(x = date, y = score, fill = score),
stat = "identity", position = "identity") +
ylim(-1, 1) +
ylab("mean percentage score") +
xlab("year") +
theme(legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 7),
legend.position = c(0.87, 0.77)) +
ggtitle("Bar Plot of Percetage Scores") +
theme(plot.title = element_text(lineheight = 0.1))
# plot dot and line plot
p2 <- ggplot(data = completedataFramebing) +
geom_line(aes(x = date, y = score), colour = "blue") +
geom_point(aes(x = date, y = score), size = 1.3, colour = "blue") +
ylim(-1, 1) +
ylab("mean percentage score") +
xlab("year") +
ggtitle("Dot and Line Plot of Percentage Scores") +
theme(plot.title = element_text(lineheight = 0.1))
# use multiplot function
# can be found at http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
multiplot(p1, p2, cols = 2)
# plot bar plot
p1 <- ggplot(data = completedataFramebing) +
geom_bar(aes(x = date, y = score, fill = score),
stat = "identity", position = "identity") +
ylim(-1, 1) +
ylab("mean percentage score") +
xlab("year") +
theme(legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 7),
legend.position = c(0.87, 0.77)) +
ggtitle("Bar Plot of Percetage Scores") +
theme(plot.title = element_text(size = 0.6))
# plot dot and line plot
p2 <- ggplot(data = completedataFramebing) +
geom_line(aes(x = date, y = score), colour = "blue") +
geom_point(aes(x = date, y = score), size = 1.3, colour = "blue") +
ylim(-1, 1) +
ylab("mean percentage score") +
xlab("year") +
ggtitle("Dot and Line Plot of Percentage Scores") +
theme(plot.title = element_text(size = 0.6))
# use multiplot function
# can be found at http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
multiplot(p1, p2, cols = 2)
# plot bar plot
p1 <- ggplot(data = completedataFramebing) +
geom_bar(aes(x = date, y = score, fill = score),
stat = "identity", position = "identity") +
ylim(-1, 1) +
ylab("mean percentage score") +
xlab("year") +
theme(legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 7),
legend.position = c(0.87, 0.77)) +
ggtitle("Bar Plot of Percetage Scores") +
theme(plot.title = element_text(size = 3))
# plot dot and line plot
p2 <- ggplot(data = completedataFramebing) +
geom_line(aes(x = date, y = score), colour = "blue") +
geom_point(aes(x = date, y = score), size = 1.3, colour = "blue") +
ylim(-1, 1) +
ylab("mean percentage score") +
xlab("year") +
ggtitle("Dot and Line Plot of Percentage Scores") +
theme(plot.title = element_text(size = 3))
# use multiplot function
# can be found at http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
multiplot(p1, p2, cols = 2)
# plot bar plot
p1 <- ggplot(data = completedataFramebing) +
geom_bar(aes(x = date, y = score, fill = score),
stat = "identity", position = "identity") +
ylim(-1, 1) +
ylab("mean percentage score") +
xlab("year") +
theme(legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 7),
legend.position = c(0.87, 0.77)) +
ggtitle("Bar Plot of Percetage Scores") +
theme(plot.title = element_text(size = 8))
# plot dot and line plot
p2 <- ggplot(data = completedataFramebing) +
geom_line(aes(x = date, y = score), colour = "blue") +
geom_point(aes(x = date, y = score), size = 1.3, colour = "blue") +
ylim(-1, 1) +
ylab("mean percentage score") +
xlab("year") +
ggtitle("Dot and Line Plot of Percentage Scores") +
theme(plot.title = element_text(size = 8))
# use multiplot function
# can be found at http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
multiplot(p1, p2, cols = 2)
# plot bar plot
p1 <- ggplot(data = completedataFramebing) +
geom_bar(aes(x = date, y = score, fill = score),
stat = "identity", position = "identity") +
ylim(-1, 1) +
ylab("mean percentage score") +
xlab("year") +
theme(legend.key.size = unit(0.5, "cm"),
legend.text = element_text(size = 7),
legend.position = c(0.87, 0.77)) +
ggtitle("Bar Plot of Percetage Scores") +
theme(plot.title = element_text(size = 12))
# plot dot and line plot
p2 <- ggplot(data = completedataFramebing) +
geom_line(aes(x = date, y = score), colour = "blue") +
geom_point(aes(x = date, y = score), size = 1.3, colour = "blue") +
ylim(-1, 1) +
ylab("mean percentage score") +
xlab("year") +
ggtitle("Dot and Line Plot of Percentage Scores") +
theme(plot.title = element_text(size = 12))
# use multiplot function
# can be found at http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
multiplot(p1, p2, cols = 2)
